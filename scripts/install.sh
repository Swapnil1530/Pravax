#!/usr/bin/env bash
set -euo pipefail

# Pravax installer (minimal MVP)
# Usage (replace <owner>/<repo> if needed):
#   curl -fsSL https://raw.githubusercontent.com/<owner>/<repo>/main/scripts/install.sh | sudo bash

# Configurable via env:
#   REGISTRY_URL  (default: ghcr.io)
#   IMAGE_NS      (default: your-org/pravax)
#   IMAGE_TAG     (default: latest)
#   API_PORT      (default: 3001)
#   WEB_PORT      (default: 3000)
#   POSTGRES_*, REDIS_* (see generated .env)

REGISTRY_URL=${REGISTRY_URL:-ghcr.io}
IMAGE_NS=${IMAGE_NS:-your-org/pravax}
IMAGE_TAG=${IMAGE_TAG:-latest}

API_PORT=${API_PORT:-3001}
WEB_PORT=${WEB_PORT:-3000}

INSTALL_DIR=/opt/pravax
ENV_FILE="$INSTALL_DIR/.env"
COMPOSE_FILE="$INSTALL_DIR/docker-compose.yml"

need_cmd() { command -v "$1" >/dev/null 2>&1; }

require_root() {
  if [ "${EUID:-$(id -u)}" -ne 0 ]; then
    echo "Please run as root (use sudo)." >&2
    exit 1
  fi
}

install_docker() {
  echo "[Pravax] Installing Docker..."
  if need_cmd apt-get; then
    apt-get update -y >/dev/null
    apt-get install -y ca-certificates curl gnupg >/dev/null
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/$(. /etc/os-release && echo "$ID")/gpg -o /etc/apt/keyrings/docker.asc
    chmod a+r /etc/apt/keyrings/docker.asc
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/$(. /etc/os-release && echo "$ID") $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" \
      > /etc/apt/sources.list.d/docker.list
    apt-get update -y >/dev/null
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin >/dev/null
  elif need_cmd dnf || need_cmd yum; then
    local DNF=dnf
    need_cmd dnf || DNF=yum
    $DNF -y install dnf-plugins-core >/dev/null || true
    $DNF config-manager --add-repo https://download.docker.com/linux/$(. /etc/os-release && echo "$ID")/docker-ce.repo >/dev/null
    $DNF -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin >/dev/null
    systemctl enable docker >/dev/null 2>&1 || true
    systemctl start docker >/dev/null 2>&1 || true
  elif need_cmd apk; then
    apk add --no-cache docker docker-cli-compose >/dev/null
    rc-update add docker default >/dev/null 2>&1 || true
    service docker start >/dev/null 2>&1 || true
  else
    echo "Install Docker manually: https://docs.docker.com/engine/install/" >&2
    exit 1
  fi
}

ensure_docker() {
  if ! need_cmd docker; then
    install_docker
  else
    echo "[Pravax] Docker found."
  fi
  if ! docker info >/dev/null 2>&1; then
    echo "[Pravax] Docker daemon not running. Starting..."
    if need_cmd systemctl; then systemctl start docker || true; fi
  fi
}

write_env() {
  mkdir -p "$INSTALL_DIR"
  if [ -f "$ENV_FILE" ]; then
    echo "[Pravax] Using existing $ENV_FILE"
    return
  fi
  cat >"$ENV_FILE" <<EOF
# Generated by Pravax installer
WEB_PORT=${WEB_PORT}
API_PORT=${API_PORT}

JWT_SECRET=$(openssl rand -hex 32 2>/dev/null || echo dev-secret)
JWT_EXPIRES_IN=7d

POSTGRES_USER=pravax
POSTGRES_PASSWORD=$(openssl rand -hex 16 2>/dev/null || echo pravax)
POSTGRES_DB=pravax
POSTGRES_PORT=5432
POSTGRES_HOST=postgres

REDIS_HOST=redis
REDIS_PORT=6379

REGISTRY_URL=${REGISTRY_URL}
IMAGE_NS=${IMAGE_NS}
IMAGE_TAG=${IMAGE_TAG}
EOF
  chmod 600 "$ENV_FILE"
}

write_compose() {
  cat >"$COMPOSE_FILE" <<'EOF'
version: "3.8"
services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pravax_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - pravax_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  api:
    image: ${REGISTRY_URL}/${IMAGE_NS}-api:${IMAGE_TAG}
    restart: unless-stopped
    env_file: .env
    depends_on:
      - postgres
      - redis
    ports:
      - "${API_PORT}:3001"

  web:
    image: ${REGISTRY_URL}/${IMAGE_NS}-web:${IMAGE_TAG}
    restart: unless-stopped
    env_file: .env
    depends_on:
      - api
    ports:
      - "${WEB_PORT}:3000"

volumes:
  pravax_pg_data:
  pravax_redis_data:
EOF
}

bring_up() {
  echo "[Pravax] Bringing up stack..."
  cd "$INSTALL_DIR"
  if command -v docker compose >/dev/null 2>&1; then
    docker compose up -d
  else
    docker-compose up -d
  fi
}

print_info() {
  echo "[Pravax] Installation complete."
  echo "- Web: http://localhost:${WEB_PORT}"
  echo "- API: http://localhost:${API_PORT}"
}

main() {
  require_root
  ensure_docker
  write_env
  write_compose
  bring_up
  print_info
}

main "$@"


